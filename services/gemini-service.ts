import { formatContentForTTS } from '@/utils/string-helpers'

export interface GeminiSummaryRequest {
  chapterHtml: string
  bookTitle?: string
}

export interface GeminiSummaryResponse {
  summary: string
  keyDialogues: string[]
  mainPoints: string[]
}

// Common configuration for Gemini API
const GEMINI_API_KEY =
  process.env.EXPO_PUBLIC_GEMINI_API_KEY || 'AIzaSyAQGVLSryDfxi4KikDE_3wHy8C-AtgT7rg'
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-lite:generateContent`

const COMMON_HEADERS = new Headers()
COMMON_HEADERS.append('Content-Type', 'application/json')
COMMON_HEADERS.append('x-goog-api-key', GEMINI_API_KEY)

const COMMON_SAFETY_SETTINGS = [
  { category: 'HARM_CATEGORY_HARASSMENT', threshold: 'BLOCK_NONE' },
  { category: 'HARM_CATEGORY_HATE_SPEECH', threshold: 'BLOCK_NONE' },
  { category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: 'BLOCK_NONE' },
  { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_NONE' },
]

const COMMON_GENERATION_CONFIG_BASE = {
  temperature: 0.2,
  topK: 32,
  topP: 1,
  maxOutputTokens: 8096,
}

// Helper functions
const handleGeminiResponse = async (response: Response) => {
  if (!response.ok) {
    const errorData = await response.json().catch(() => ({ error: { message: 'Unknown error' } }))
    throw new Error(
      `Gemini API Error ${response.status}: ${errorData.error?.message || 'Unknown error'}`,
    )
  }
  return response.json()
}

const parseGeminiResult = (result: any, errorContext: string) => {
  const contentParts = result.candidates?.[0]?.content?.parts
  let rawJson = null

  if (contentParts && contentParts.length > 0) {
    rawJson = contentParts[0].text
  }

  if (!rawJson) {
    throw new Error(`Kh√¥ng nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ t·ª´ Gemini. Context: ${errorContext}`)
  }

  try {
    return JSON.parse(rawJson)
  } catch (e) {
    console.log(`L·ªói khi parse JSON t·ª´ Gemini (${errorContext}):`, e, JSON.stringify(result))
    throw new Error(`Gemini tr·∫£ v·ªÅ vƒÉn b·∫£n kh√¥ng ph·∫£i JSON h·ª£p l·ªá: ${rawJson.substring(0, 200)}...`)
  }
}

export const CONTENT_SCHEMA = {
  type: 'OBJECT',
  properties: {
    content: {
      type: 'STRING',
      description: 'N·ªôi dung vƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω t·ª´ HTML',
      nullable: true,
    },
  },
  required: ['content'],
}

export const summarizeChapter = async (content: string): Promise<string> => {
  try {
    // Lo·∫°i b·ªè HTML tags ƒë·ªÉ l·∫•y text thu·∫ßn
    let textContent = content
      .replace(/<[^><]*>/g, ' ')
      .replace(/\s+/g, ' ')
      .trim()

    textContent = formatContentForTTS(textContent)

    if (!textContent || textContent.length < 50) {
      throw new Error('N·ªôi dung ch∆∞∆°ng qu√° ng·∫Øn ƒë·ªÉ t√≥m t·∫Øt')
    }

    // Gi·ªõi h·∫°n ƒë·ªô d√†i input ƒë·ªÉ tr√°nh v∆∞·ª£t qu√° token limit
    const maxInputLength = 30000 // ~7500 tokens
    const processedContent =
      textContent.length > maxInputLength
        ? textContent.substring(0, maxInputLength) + '...'
        : textContent

    const prompt = `
B·∫°n l√† m·ªôt bi√™n t·∫≠p vi√™n chuy√™n nghi·ªáp, th·ª±c hi·ªán nhi·ªám v·ª• c√¥ ƒë·ªçng l·∫°i ch∆∞∆°ng truy·ªán.

**NHI·ªÜM V·ª§ C·ªêT L√ïI:**
R√∫t ng·∫Øn ƒë·ªô d√†i c·ªßa ch∆∞∆°ng truy·ªán d∆∞·ªõi ƒë√¢y xu·ªëng c√≤n **50-60% ƒë·ªô d√†i b·∫£n g·ªëc** b·∫±ng c√°ch l∆∞·ª£c b·ªè tri·ªát ƒë·ªÉ c√°c chi ti·∫øt, m√¥ t·∫£, ho·∫∑c ƒëo·∫°n vƒÉn d∆∞ th·ª´a, kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn m·∫°ch truy·ªán ch√≠nh, trong khi v·∫´n gi·ªØ nguy√™n ho√†n to√†n k·∫øt c·∫•u v√† c√°c y·∫øu t·ªë quan tr·ªçng c·ªßa truy·ªán.

**Y√äU C·∫¶U B·∫ÆT BU·ªòC:**
1. üèóÔ∏è **GI·ªÆ NGUY√äN K·∫æT C·∫§U:**
   - B·∫£o to√†n tuy·ªát ƒë·ªëi tr√¨nh t·ª± c√°c t√¨nh ti·∫øt, s·ª± ki·ªán.
   - Gi·ªØ nguy√™n d√≤ng ch·∫£y c·ªßa b·ªëi c·∫£nh.
   - Duy tr√¨ ƒë·∫ßy ƒë·ªß c√°c t∆∞∆°ng t√°c quan tr·ªçng gi·ªØa c√°c nh√¢n v·∫≠t, bao g·ªìm c·∫£ h·ªôi tho·∫°i c·ªët l√µi.

2. ‚úÇÔ∏è **CH·ªà L∆Ø·ª¢C B·ªé, KH√îNG VI·∫æT L·∫†I:**
   - **Ch·ªâ c·∫Øt b·ªè:** Lo·∫°i b·ªè c√°c c√¢u vƒÉn, ƒëo·∫°n m√¥ t·∫£, ho·∫∑c chi ti·∫øt kh√¥ng c·∫ßn thi·∫øt (nh∆∞ m√¥ t·∫£ c·∫£nh v·∫≠t, c·∫£m x√∫c d∆∞ th·ª´a, ho·∫∑c th√¥ng tin n·ªÅn kh√¥ng li√™n quan tr·ª±c ti·∫øp ƒë·∫øn m·∫°ch truy·ªán).
   - **Kh√¥ng vi·∫øt l·∫°i:** Tuy·ªát ƒë·ªëi kh√¥ng di·ªÖn gi·∫£i, t√≥m t·∫Øt, ho·∫∑c thay ƒë·ªïi vƒÉn phong c·ªßa nguy√™n t√°c. Ch·ªâ gi·ªØ l·∫°i c√°c c√¢u vƒÉn g·ªëc, kh√¥ng ch·ªânh s·ª≠a c√°ch di·ªÖn ƒë·∫°t.

3. üéØ **M·ª§C TI√äU R√öT G·ªåN:**
   - ∆Øu ti√™n lo·∫°i b·ªè c√°c ƒëo·∫°n vƒÉn m√¥ t·∫£ d√†i d√≤ng, th√¥ng tin n·ªÅn kh√¥ng quan tr·ªçng, ho·∫∑c c√°c chi ti·∫øt kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn c·ªët truy·ªán ch√≠nh (v√≠ d·ª•: m√¥ t·∫£ ngo·∫°i c·∫£nh, c·∫£m x√∫c l·∫∑p l·∫°i, ho·∫∑c th√¥ng tin ph·ª• v·ªÅ nh√¢n v·∫≠t kh√¥ng li√™n quan tr·ª±c ti·∫øp).
   - ƒê·∫£m b·∫£o n·ªôi dung sau khi r√∫t g·ªçn v·∫´n truy·ªÅn t·∫£i ƒë·∫ßy ƒë·ªß c√°c s·ª± ki·ªán ch√≠nh, t∆∞∆°ng t√°c nh√¢n v·∫≠t, v√† √Ω nghƒ©a c·ªët l√µi c·ªßa ch∆∞∆°ng.

**V√ç D·ª§ V·ªÄ VI·ªÜC L∆Ø·ª¢C B·ªé:**
- **G·ªëc:** "B·∫ßu tr·ªùi trong xanh, cao v·ªùi v·ª£i, kh√¥ng m·ªôt g·ª£n m√¢y, v√† nh·ªØng tia n·∫Øng v√†ng √≥ng ·∫£, ·∫•m √°p nh·∫π nh√†ng chi·∫øu xu·ªëng con ƒë∆∞·ªùng ƒë·∫•t nh·ªè quanh co."
- **Sau khi r√∫t g·ªçn:** "N·∫Øng v√†ng chi·∫øu xu·ªëng con ƒë∆∞·ªùng ƒë·∫•t nh·ªè."

**ƒê·ªò D√ÄI M·ª§C TI√äU:**
- Phi√™n b·∫£n sau khi c√¥ ƒë·ªçng ph·∫£i ƒë·∫°t ƒë·ªô d√†i **50-60% so v·ªõi b·∫£n g·ªëc**, kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° ho·∫∑c th·∫•p h∆°n m·ª©c n√†y qu√° nhi·ªÅu (v√≠ d·ª•: kh√¥ng ƒë∆∞·ª£c ch·ªâ r√∫t g·ªçn xu·ªëng 85% ho·∫∑c √≠t h∆°n 50%).
**N·ªôi dung ch∆∞∆°ng g·ªëc c·∫ßn c√¥ ƒë·ªçng:**
${processedContent}

H√£y b·∫Øt ƒë·∫ßu th·ª±c hi·ªán vi·ªác c√¥ ƒë·ªçng, ƒë·∫£m b·∫£o lo·∫°i b·ªè tri·ªát ƒë·ªÉ c√°c chi ti·∫øt d∆∞ th·ª´a v√† ƒë·∫°t ƒë√∫ng m·ª•c ti√™u ƒë·ªô d√†i.

**QUAN TR·ªåNG**: Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON v·ªõi format sau:
{
  "content": "N·ªôi dung ch∆∞∆°ng truy·ªán ƒë√£ ƒë∆∞·ª£c c√¥ ƒë·ªçng ·ªü ƒë√¢y..."
}
`

    const raw = JSON.stringify({
      contents: [
        {
          parts: [{ text: prompt }],
        },
      ],
      generationConfig: {
        ...COMMON_GENERATION_CONFIG_BASE,
        responseSchema: CONTENT_SCHEMA,
        responseMimeType: 'application/json',
        maxOutputTokens: 8096,
      },
      safetySettings: COMMON_SAFETY_SETTINGS,
    })

    const response = await fetch(GEMINI_API_URL, {
      method: 'POST',
      headers: COMMON_HEADERS,
      body: raw,
      redirect: 'follow',
    })

    const data = await handleGeminiResponse(response)
    const result = parseGeminiResult(data, 'chapter summarization')
    const summary = result.content || result // Fallback n·∫øu kh√¥ng c√≥ field content

    if (!summary || summary.length === 0) {
      throw new Error('Gemini API tr·∫£ v·ªÅ n·ªôi dung tr·ªëng')
    }

    return summary
  } catch (error) {
    console.error('Error in summarizeChapter:', error)
    if (error instanceof Error) {
      throw error
    }
    throw new Error('C√≥ l·ªói x·∫£y ra khi t√≥m t·∫Øt ch∆∞∆°ng truy·ªán')
  }
}

// Helper function ƒë·ªÉ ki·ªÉm tra API key
export const validateGeminiApiKey = (): boolean => {
  return (
    typeof GEMINI_API_KEY === 'string' &&
    GEMINI_API_KEY !== 'YOUR_GEMINI_API_KEY' &&
    GEMINI_API_KEY.length > 30
  )
}

// Export service object t∆∞∆°ng t·ª± nh∆∞ trong file tham kh·∫£o
export const geminiServices = {
  summarizeChapter,
  validateGeminiApiKey,
}
